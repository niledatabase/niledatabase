import React from "react";
import Stack from "@mui/joy/Sheet";
import Typography from "@mui/joy/Typography";
import Add from "@mui/icons-material/Add";
import Table from "@mui/joy/Table";
import IconButton from "@mui/joy/IconButton";
import Input from "@mui/joy/Input";
import Checkbox from "@mui/joy/Checkbox";
import { useParams } from "react-router";
import { Link as ReactLink } from "react-router-dom";
import MUILink from "@mui/joy/Link";
import Markdown from "react-markdown";

export default function Todos() {
  const params = useParams();
  const tenantId = params.tenantId;

  const [todos, setTodos] = React.useState(null);
  const [tenantName, setTenantName] = React.useState(null);

  React.useEffect(() => {
    fetch(`/api/tenants/${tenantId}/todos`)
      .then((res) => res.json())
      .then((data) => setTodos(data));
  }, [tenantId]);

  React.useEffect(() => {
    fetch(`/api/tenants/${tenantId}`)
      .then((res) => res.json())
      .then((data) => setTenantName(data.name));
  }, [tenantId]);

  return (
    <Stack
      spacing={2}
      mt={2}
      sx={{ minWidth: "50%", maxWidth: "80%", backgroundColor: "white" }}
    >
      <Typography
        level="h2"
        textAlign={"center"}
        sx={{ textTransform: "uppercase", margin: "10px" }}
      >
        {tenantName}'s Todos
      </Typography>
      <div
        style={{ justifyContent: "center", display: "flex", margin: "10px" }}
      >
        <MUILink component={ReactLink} to="/tenants" justifyContent={"center"}>
          (Back to tenant selection){" "}
        </MUILink>
      </div>
      <form
        name="newtodo"
        id="newtodo"
        onSubmit={(event) => {
          event.preventDefault();
          const title = event.currentTarget.elements[1].value; // first element is the button
          handleAdd(title);
        }}
        style={{ display: "flex", flexWrap: "nowrap", width: "100%" }}
      >
        <IconButton type="submit">
          {" "}
          <Add />{" "}
        </IconButton>
        <Input
          placeholder="Add task"
          variant="outlined"
          id="todo"
          name="todo"
          sx={{ width: "80%" }}
        ></Input>
      </form>
      <Table>
        <caption>
          Estimates are generated by a very smart Llama ðŸ¦™ (3.1 405B){" "}
        </caption>
        <thead>
          <tr>
            <th style={{ width: "60%" }}> Task </th>
            <th> AI estimate</th>
          </tr>
        </thead>
        <tbody>
          {(() => {
            if (!todos) {
              return (
                <tr>
                  <td colSpan={2}>
                    <Typography level="h2" textAlign={"center"}>
                      {" "}
                      Loading...
                    </Typography>
                  </td>
                </tr>
              );
            } else if (!Array.isArray(todos)) {
              return (
                <tr>
                  <td colSpan={2}>
                    <Typography level="h2" textAlign={"center"}>
                      {" "}
                      Error: {todos.message}
                    </Typography>
                  </td>
                </tr>
              );
            } else {
              return todos.map((todo) => (
                <tr>
                  <td style={{ width: "60%" }}>
                    <Checkbox
                      label={<Typography>{todo.title}</Typography>}
                      checked={todo.complete}
                      onChange={() => completeTodo(tenantId, todo)}
                    />
                  </td>
                  <td>
                    {" "}
                    <Markdown>
                      {todo.estimate
                        ? String(todo.estimate).replaceAll("\n", "  \n")
                        : "No estimate found"}
                    </Markdown>{" "}
                  </td>
                </tr>
              ));
            }
          })()}
        </tbody>
      </Table>
    </Stack>
  );

  function handleAdd(title) {
    fetch(`/api/tenants/${tenantId}/todos`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        title: title,
        complete: false, // new todos are always incomplete
      }),
    })
      .then((resp) => resp.json())
      .then((datum) => {
        console.log(datum);
        var curr_state = todos.slice(); // need to copy so React will notice state change
        curr_state.push({
          title: datum[0].title,
          id: datum[0].id,
          estimate: datum[0].estimate,
          complete: datum[0].complete,
        });
        setTodos(curr_state);
      })
      .catch((error) => {
        console.error(error);
      });
  }

  function completeTodo(tenantId, todo) {
    const newComplete = !todo.complete;
    fetch(`/api/tenants/${tenantId}/todos`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        id: todo.id,
        complete: newComplete,
      }),
    })
      .then((resp) => {
        console.log(resp);
        if (resp.status !== 200) {
          throw new Error("Error: " + resp.message + " " + resp.status);
        }
        var curr_state = todos.slice(); // need to copy so React will notice state change
        curr_state.find((t) => t.id === todo.id).complete = newComplete;
        setTodos(curr_state);
      })
      .catch((error) => {
        console.error(error);
      });
  }
}
